// apiHandler.ts

import { DefaultService } from '../api-autogenerated/services/DefaultService';
// If the above cannot be found, run `npm run build:apiSchema` to generate it do not edit it manually

interface Handlers<Response, ReturnType> {
  successCallback: (response: Response) => ReturnType;
  errorCallback?: (error: Error) => ReturnType;
}

export type RequestFunction<Params extends any[], Response> = (
  ...params: Params
) => Promise<Response>;

export const apiHandler = <Params extends any[], Response, ReturnType>(
  requestFunction: RequestFunction<Params, Response>,
  params: Params,
  { successCallback, errorCallback }: Handlers<Response, ReturnType>
): Promise<ReturnType> => {
  return new Promise((resolve, reject) => {
    requestFunction(...params)
      .then(response => {
        const result = successCallback(response);
        resolve(result as ReturnType);
      })
      .catch(error => {
        console.error(error);
        if (errorCallback) {
          const errorResult = errorCallback(error);
          resolve(errorResult as ReturnType);
        } else {
          reject(error);
        }
      });
  });
};

// re-export everything from the original API
export * from '../api-autogenerated/index';
// If the above cannot be found, run `npm run build:apiSchema` to generate it do not edit it manually

// export the DefaultService as well
export { DefaultService };
